#library "paketlib"
#include "zcommon.acs"

#libdefine PACKET_WORD 0 // not "int" because technically fixed and single floats can go here too, and this is talking about width
#libdefine PACKET_SHORT 1
#libdefine PACKET_BYTE 2
#libdefine PACKET_TOTAL 3 //not an actual width

#define PACKET_NATIVE_HEADER_SIZE 13
int Packet_Rval; // raw type

int __Packet_Tmp[4];

function int __Packet_ReadUnsignedByte (str pac, int pos)
{
	int b = GetChar(pac, pos);

	if(b < 0)
		b += 256;

	return b;
}

// Does nothing currently, but it might be needed in the future.
function str Packet_New (void)
{
	return "";
}

// str Packet_Append (str pac, raw val, int width = PACKET_WORD)
function str Packet_Append (str pac, int val, int width)
{
	int zeroChar = 0x80, max, tmp;
	
	if( (width < PACKET_WORD) || (width >= PACKET_TOTAL) )
		width = PACKET_WORD;
	
	switch(width)
	{
		case PACKET_WORD: max = 4; break;
		case PACKET_SHORT: max = 2; break;
		case PACKET_BYTE: max = 1; break;
	}
	
	Log(s:"==__Packet_Tmp==");
	for(int i = 0; i < max; i++)
	{
		tmp = val & 0xFF;
		
		if(!tmp)
		{
			zeroChar |= 1 << i;
			tmp = 0xFF;
			Log(s:"zero byte");
		}

		Log(x:tmp);

		__Packet_Tmp[i] = tmp;

		val >>= 8;
	}

	Log(a:(__Packet_Tmp, 0, max));

	return StrParam(s:pac, c:zeroChar, a:(__Packet_Tmp, 0, max));
}

function str Packet_AppendStr (str pac, str val)
{
	val = StrLeft(val, 2048);
	Log(s:"strlen = ", i:StrLen(val));
	pac = Packet_Append(pac, StrLen(val), PACKET_WORD);
	
	return StrParam(s:pac, s:val);
}

// int Packet_Send (str script, str pac, int client = -1)
function int Packet_Send (str scrip, str pac, int client)
{
	int maxPacketSize = GetCVar("sv_maxpacketsize"), packetSize = StrLen(pac) + PACKET_NATIVE_HEADER_SIZE;
	
	if(maxPacketSize > 2048)
		maxPacketSize = 2048;
	
	if(packetSize > maxPacketSize)
	{
		Log(s:"Packet_Send ERROR: Packet is too large (", i:packetSize, s:" bytes)! Current server settings allow for only ", i:maxPacketSize, s:" bytes.");
		return 0;
	}
	
	if(packetSize == PACKET_NATIVE_HEADER_SIZE)
	{
		Log(s:"Packet_Send ERROR: Packet is empty. Not sending.");
		return 0;
	}
	
	return NamedSendNetworkString(scrip, pac, client);
}

// raw Packet_Read (str pac, int width = PACKET_WORD)
function int Packet_Read (str pac, int width)
{
	int zeroChar = __Packet_ReadUnsignedByte(pac, 0), max, shiftAmount;
	
	if( (width < PACKET_WORD) || (width >= PACKET_TOTAL) )
		width = PACKET_WORD;
	
	switch(width)
	{
		case PACKET_WORD: max = 4; break;
		case PACKET_SHORT: max = 2; break;
		case PACKET_BYTE: max = 1; break;
	}

	shiftAmount = (max - 1) * 8;
	
	Packet_Rval = 0;

	Log(s:"==packet_rval==");
	for(int i = 0; i < max; i++)
	{
		Packet_Rval >>= 8;
		
		if(!(zeroChar & (1 << i)))
		{
			Packet_Rval &= 0x00FFFFFF;
			Packet_Rval |= __Packet_ReadUnsignedByte(pac, i + 1) << shiftAmount;
		}

		Log(x:Packet_Rval);
	}
	
	return StrMid(pac, max + 1, 0x7FFFFFFF);
}

// raw Packet_ReadStr(str pac)
function int Packet_ReadStr(str pac)
{
	int len;
	pac = Packet_Read(pac, PACKET_WORD);
	len = Packet_Rval;

	Log(s:"strlen = ", i:len);
	
	Packet_Rval = StrLeft(pac, len);
	
	return StrMid(pac, len, 0x7FFFFFFF);
}
